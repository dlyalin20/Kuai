# Generated by Django 3.0.8 on 2021-04-29 23:45

import Landing.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_mysql.models
import jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
                ('xcor', models.FloatField()),
                ('ycor', models.FloatField()),
                ('verified', models.BooleanField(default=False)),
                ('placeID', models.TextField(default=False, unique=True)),
                ('allows_skips', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Capacity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business', models.CharField(max_length=40, unique=True)),
                ('numReviews', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('average', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
            ],
        ),
        migrations.CreateModel(
            name='capacityData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business', models.CharField(max_length=40)),
                ('capacity', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('author', models.CharField(max_length=20)),
                ('timestamp', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='waitData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business', models.CharField(max_length=40)),
                ('wait_time', models.FloatField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(180)])),
                ('author', models.CharField(max_length=20)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='waitTimes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business', models.CharField(max_length=40, unique=True)),
                ('numReviews', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('average', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=40, unique=True, validators=[Landing.models.validate_user])),
                ('first_name', models.CharField(max_length=40)),
                ('last_name', models.CharField(max_length=40)),
                ('email', models.EmailField(max_length=254)),
                ('is_business', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Temp_Business',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('verified', models.BooleanField(default=False)),
                ('cached_time', models.DateTimeField(auto_now=True)),
                ('placeID', models.TextField(default=False, unique=True)),
                ('capacity', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Landing.Capacity')),
                ('wait_time', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='Landing.waitTimes')),
            ],
        ),
        migrations.CreateModel(
            name='Staff_Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staffof', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='Landing.Business')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)])),
                ('longitude', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)])),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='Landing/pfps')),
                ('favorite_businesses', jsonfield.fields.JSONField(blank=True, null=True)),
                ('search_history', django_mysql.models.ListTextField(models.CharField(max_length=40), blank=True, null=True, size=None)),
                ('subscription_type', models.CharField(choices=[('BASIC', 'Free User'), ('PREMIUM', 'Subscribed')], default='BASIC', max_length=10)),
                ('skip_count', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(15)])),
                ('skip_record', jsonfield.fields.JSONField(blank=True, null=True)),
                ('all_capacity_updates', models.ManyToManyField(blank=True, related_name='all_cap_up', to='Landing.capacityData')),
                ('all_time_updates', models.ManyToManyField(blank=True, related_name='all_time_up', to='Landing.waitData')),
                ('last_capacity_update', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_cap_up', to='Landing.capacityData')),
                ('last_time_update', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='last_time_up', to='Landing.waitData')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Business_Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('businesses', models.ManyToManyField(blank=True, to='Landing.Business')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='business',
            name='capacity',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cap', to='Landing.Capacity'),
        ),
        migrations.AddField(
            model_name='business',
            name='wait_time',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='time', to='Landing.waitTimes'),
        ),
    ]
